on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
env:
  GHCR_USER: ${{ vars.GHCR_USER }}
  GHCR_ORG: ${{ vars.GHCR_ORG }}
  GH_TOKEN: ${{ secrets.GHCR_TOKEN }}
  AWS_REGION: eu-west-1
jobs:
  asset_registry_job:
    name: capture asset registry
    runs-on: ubuntu-latest
    if: ${{ !contains(github.repository, 'util-orch-template') }}
    steps:
      - uses: actions/checkout@v3
        with:
          path: main
      - name: detect environment
        run: |
          echo "ENVIRONMENT=${{ inputs.environment }}" >> $GITHUB_ENV
          echo "AZURE_CREDS_SECRET_NAME=${{ inputs.environment }}_AZURE_CREDS"|sed 's/-/_/g' >> $GITHUB_ENV
          case "${{ inputs.environment }}" in
            'eks-chprod01')
              REGION='eu-central-2'
              ;;
            gke-*)
              REGION='${{ vars.GCP_REGION }}'
              ;;
            *)
              REGION='${{ vars.AWS_REGION }}'
              ;;
          esac
          echo "REGION=${REGION}" >> $GITHUB_ENV
      - name: detect cluster
        if: ${{ startsWith(env.ENVIRONMENT, 'eks-') || startsWith(env.ENVIRONMENT, 'gke-') || startsWith(env.ENVIRONMENT, 'aks-') }}
        run: |
          if [ "${{ env.ENVIRONMENT }}" == 'eks-dev' ]; then
            CLUSTER='dev01'
          else
            CLUSTER="$(echo ${{ env.ENVIRONMENT }} | sed 's/^eks-//g;s/^gke-//g;s/^aks-//g')"
          fi
          echo "CLUSTER=${CLUSTER}" >> $GITHUB_ENV
      - uses: actions/checkout@v3
        with:
          ref: asset-registry
          token: ${{ secrets.GHCR_TOKEN }}
          path: asset-registry
      - uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}
      - name: setup aws cli
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: login to eks
        if: ${{ startsWith(env.ENVIRONMENT, 'eks-') }}
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER }}
      - name: setup openvpn
        if: ${{ startsWith(env.ENVIRONMENT, 'iv-') }}
        run: |
          sudo apt-get update
          sudo apt-get --assume-yes --no-install-recommends install openvpn
          echo "KUBE_CONFIG_DATA_KEY=${{ env.ENVIRONMENT }}_KUBE_CONFIG_DATA" | sed 's/-/_/g' >> $GITHUB_ENV
      - name: start openvpn
        if: ${{ startsWith(env.ENVIRONMENT, 'iv-') }}
        run: |
          echo "${{ secrets.NDVR_OVPN_USERNAME_PASSWORD }}" > secrets.txt
          echo "${{ secrets.NDVR_OVPN_CONF }}" > config.ovpn
          mkdir $HOME/.kube
          echo "${{ secrets[env.KUBE_CONFIG_DATA_KEY] }}" > $HOME/.kube/config
          sudo chmod 600 $HOME/.kube/config
          sudo echo '10.100.235.50 haproxy' | sudo tee -a /etc/hosts
          sudo openvpn --config config.ovpn --log openvpn.log --daemon
      - name: wait for openvpn
        if: ${{ startsWith(env.ENVIRONMENT, 'iv-') }}
        run: |
          until ping -c1 haproxy; do sleep 2; done
      - name: login to gcp
        if: ${{ startsWith(env.ENVIRONMENT, 'gke-') }}
        uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
      - name: login to gke
        if: ${{ startsWith(env.ENVIRONMENT, 'gke-') }}
        uses: 'google-github-actions/get-gke-credentials@v2'
        with:
          cluster_name: ${{ env.CLUSTER }}
          location: ${{ env.REGION }}
      - name: setup gke context
        if: ${{ startsWith(env.ENVIRONMENT, 'gke-') }}
        run: |
          kubectl config rename-context $(kubectl config current-context) ${{ env.ENVIRONMENT }}
      - name: login to azure
        if: ${{ startsWith(env.ENVIRONMENT, 'aks-') }}
        uses: azure/login@v2
        with:
          creds: ${{ secrets[env.AZURE_CREDS_SECRET_NAME] }}
      - name: login to aks
        uses: azure/aks-set-context@v3
        if: ${{ startsWith(env.ENVIRONMENT, 'aks-') }}
        with:
           resource-group: "${{ env.CLUSTER }}"
           cluster-name: "${{ env.CLUSTER }}"
      - name: login to ghcr.io
        run: |
          docker login ghcr.io -u ${{ vars.GHCR_USER }} -p ${{ secrets.GHCR_TOKEN }}
      - uses: actions/setup-python@v4
        with:
          python-version: 'pypy3.9'
          cache: 'pip'
          cache-dependency-path: "main/requirements.txt"
      - name: generate csv
        run: |
          echo "ORCH_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV
          cp -f ../asset-registry/assets*.csv .
          just assets
          cp -f releases.yaml assets*.csv ../asset-registry
        working-directory: main
      - name: store csv
        run: |
          git add .
          git status
        working-directory: ./asset-registry
      - name: publish csv
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: asset-registry
          directory: ./asset-registry
          message: |
            chore(assets): registry captured for sha ${{ env.ORCH_SHA }}
      - name: stop openvpn
        if: ${{ always() }}
        run: |
          if [ "${{ startsWith(env.ENVIRONMENT, 'iv-') }}" == 'true' ]; then
            sudo chmod 777 openvpn.log
            sudo killall openvpn
          fi
      - name: archive openvpn logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: OpenVPN logs
          path: openvpn.log
          if-no-files-found: ignore
