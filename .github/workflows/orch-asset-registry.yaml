on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string

env:
  GHCR_USER: innovationlabsmt
  GH_TOKEN: ${{ secrets.GHCR_TOKEN }}
  AWS_REGION: eu-west-1

jobs:
  asset_registry_job:
    name: capture asset registry
    runs-on: ubuntu-latest
    if: ${{ !startsWith(github.repository, 'GiGInnovationLabs/util-orch-template') }}
    steps:
      - uses: actions/checkout@v3
        with:
          path: main
      - uses: actions/checkout@v3
        with:
          ref: asset-registry
          token: ${{ secrets.GHCR_TOKEN }}
          path: asset-registry
      - uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}
      - name: setup aws cli
        if: ${{ startsWith(inputs.environment, 'eks-') }}
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: login to eks
        if: ${{ startsWith(inputs.environment, 'eks-') }}
        run: |
          if [ "${{ inputs.environment }}" == 'eks-dev' ]; then
            aws eks update-kubeconfig --name ${{ inputs.environment }}
          else
            aws eks update-kubeconfig --name $(echo '${{ inputs.environment }}' | sed 's/eks\-//g')
          fi
      - name: setup openvpn
        if: ${{ startsWith(inputs.environment, 'iv-') }}
        run: |
          sudo apt-get update
          sudo apt-get --assume-yes --no-install-recommends install openvpn
          echo "OVPN_USERNAME_PASSWORD_KEY=${{ inputs.environment }}_OVPN_USERNAME_PASSWORD" | sed 's/-/_/g' >> $GITHUB_ENV
          echo "OVPN_CONF_KEY=${{ inputs.environment }}_OVPN_CONF" | sed 's/-/_/g' >> $GITHUB_ENV
          echo "KUBE_CONFIG_DATA_KEY=${{ inputs.environment }}_KUBE_CONFIG_DATA" | sed 's/-/_/g' >> $GITHUB_ENV
      - name: start openvpn
        if: ${{ startsWith(inputs.environment, 'iv-') }}
        run: |
          echo "${{ secrets[env.OVPN_USERNAME_PASSWORD_KEY] }}" > secrets.txt
          echo "${{ secrets[env.OVPN_CONF_KEY] }}" > config.ovpn
          mkdir $HOME/.kube
          echo "${{ secrets[env.KUBE_CONFIG_DATA_KEY] }}" > $HOME/.kube/config
          sudo chmod 600 $HOME/.kube/config
          sudo echo '10.100.235.50 haproxy' | sudo tee -a /etc/hosts
          sudo openvpn --config config.ovpn --log openvpn.log --daemon
      - name: wait for openvpn
        if: ${{ startsWith(inputs.environment, 'iv-') }}
        run: |
          until ping -c1 haproxy; do sleep 2; done
      - name: login to ghcr.io
        run: |
          docker login ghcr.io -u ${{ env.GHCR_USER }} -p ${{ secrets.GHCR_TOKEN }}
      - uses: actions/setup-python@v4
        with:
          python-version: 'pypy3.9'
          cache: 'pip'
          cache-dependency-path: "main/requirements.txt"
      - name: generate csv
        run: |
          echo "ORCH_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV
          cp -f ../asset-registry/assets*.csv .
          just assets
          cp -f releases.yaml assets*.csv ../asset-registry
        working-directory: main
      - name: store csv
        run: |
          git add .
          git status
        working-directory: ./asset-registry
      - name: publish csv
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: asset-registry
          directory: ./asset-registry
          message: |
            chore(assets): registry captured for sha ${{ env.ORCH_SHA }}
      - name: stop openvpn
        if: ${{ always() }}
        run: |
          if [ "${{ startsWith(inputs.environment, 'iv-') }}" == 'true' ]; then
            sudo chmod 777 openvpn.log
            sudo killall openvpn
          fi
      - name: archive openvpn logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: OpenVPN logs
          path: openvpn.log
          if-no-files-found: ignore
