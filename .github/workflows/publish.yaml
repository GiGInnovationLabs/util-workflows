on: 
  workflow_call:
    secrets:
      GHCR_TOKEN:
        required: true

env:
  HELM_EXPERIMENTAL_OCI: 1
  GHCR_USER: innovationlabsmt
  GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}

jobs:
  publish_artifact:
    name: Publish release artifacts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ env.GHCR_TOKEN }}
      - id: theVersion
        run: echo "::set-output name=theVersion::$(echo ${GITHUB_REF##*/})"
      - run: make test
        if: "!contains(github.event.head_commit.message, '[skip test]')"
      - name: Publish OpenApi spec
        run: find src/ -name ${SERVICE}.openapi.json | xargs -r gh release upload ${VERSION} --clobber
        env:
          VERSION: ${{ steps.theVersion.outputs.theVersion }}
          SERVICE: ${{ github.event.repository.name }}
      - name: Checkout k6 repository to access client generation
        uses: actions/checkout@v2
        with:
          path: ./k6
          token: ${{ secrets.GHCR_TOKEN }}
          repository: GiGInnovationLabs/k6-playground
      - name: Generate and publish clients for k6
        run: |
          find src/ -name ${SERVICE}.openapi.json | xargs -i -r  sh -c 'cp {} ./k6/012_autogen_clients/specs/'
          cd ./k6/012_autogen_clients
          ./generate.sh ${SERVICE} ${SERVICE}.openapi.json
          tar -czvf ${SERVICE}-k6-client.tar.gz ./clients/${SERVICE}/
          cd -
          gh release upload ${VERSION} ./k6/012_autogen_clients/${SERVICE}-k6-client.tar.gz --clobber
        env:
          VERSION: ${{ steps.theVersion.outputs.theVersion }}
          SERVICE: ${{ github.event.repository.name }} 
      - uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ env.GHCR_USER }}
          password: ${{ env.GHCR_TOKEN }}
      - run: |
          helm registry login ghcr.io -u ${{ env.GHCR_USER }} -p ${{ env.GHCR_TOKEN }}
      - uses: volesen/setup-skaffold@v1.1
        with:
          version: 'v1.33.0'
      - run: skaffold build -t ${VERSION}
        env:
          VERSION: ${{ steps.theVersion.outputs.theVersion }}
      - run: |
          helm dep up
          helm package --version ${VERSION} --app-version ${VERSION} .
          helm push ${{ github.event.repository.name }}-${VERSION}.tgz oci://ghcr.io/GiGInnovationLabs/helm
        env:
          VERSION: ${{ steps.theVersion.outputs.theVersion }}
      - run: |
          REL_ID=$(gh api -X GET repos/{owner}/{repo}/releases --jq '.[] | select(.tag_name == "${{ steps.theVersion.outputs.theVersion }}") | .id')
          gh api -X PATCH repos/{owner}/{repo}/releases/${REL_ID} -F prerelease=false -F name=${{ steps.theVersion.outputs.theVersion }}
      - uses: benc-uk/workflow-dispatch@v1
        if: "!contains(github.event.head_commit.message, '[skip deploy]')"
        with:
          workflow: Update
          repo: GiGInnovationLabs/orch-eks-dev
          token: ${{ env.GHCR_TOKEN }}
          ref: main
          inputs: '{ "repository": "${{ github.event.repository.name }}", "version": "${{ steps.theVersion.outputs.theVersion }}" }'
