on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      tenantId:
        required: false
        type: string

env:
  GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
  AWS_REGION: eu-west-1

jobs:
  helmfile_job:
    name: deploy to EKS
    runs-on: ubuntu-latest
    steps:
      # - uses: actions/checkout@v3
      #   with:
      #     token: ${{ secrets.GHCR_TOKEN }}
      # - name: announce
      #   run: |
      #     echo "environment=${{ inputs.environment }}, E2E tenantId=${{ inputs.tenantId }}"
      # - uses: extractions/setup-just@v1
      # - uses: open-policy-agent/setup-opa@v1
      #   with:
      #     version: latest
      # - run: just test
      # - uses: mamezou-tech/setup-helmfile@v1.0.0
      #   with:
      #     helmfile-version: 'v0.147.0'
      #     install-kubectl: no
      #     install-helm: no
      # - uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ env.AWS_REGION }}
      # - name: login to eks
      #   run: |
      #     if [ "${{ inputs.environment }}" == 'eks-dev' ]; then
      #       aws eks update-kubeconfig --name ${{ inputs.environment }}
      #     else
      #       aws eks update-kubeconfig --name $(echo '${{ inputs.environment }}' | sed 's/eks\-//g')
      #     fi
      # - name: disable error notifications
      #   run: |
      #     kubectl patch daemonset fluent-bit -n telemetry -p '{"spec": {"template": {"spec": {"nodeSelector": {"non-existing": "true"}}}}}' || true
      # - name: synchronize services
      #   run: |
      #     helmfile apply --concurrency 4
      # - name: check services
      #   run: |
      #     if [ ! -z "$(helm ls -a -o yaml -n endeavour | yq e '.[].status' - | grep -v '^deployed$')" ]; then
      #       echo "::error title=status::Some charts not deployed !!!"
      #       exit 1
      #     fi
      #     kubectl get ds,deploy -n endeavour -o name | xargs -r kubectl rollout status -n endeavour --timeout=3m
      #     just health-opa
      # - name: enable error notifications
      #   if: always()
      #   run: |
      #     kubectl patch daemonset fluent-bit -n telemetry --type json -p='[{"op": "remove", "path": "/spec/template/spec/nodeSelector/non-existing"}]' || true
      # - name: start e2e tests
      #   uses: benc-uk/workflow-dispatch@v1
      #   if: ${{ inputs.tenantId }}
      #   with:
      #     workflow: E2E test
      #     repo: GiGInnovationLabs/endeavour-e2e
      #     token: ${{ secrets.GHCR_TOKEN }}
      #     ref: main
      #     inputs: '{"environment": "${{ inputs.environment }}", "tenantId": "${{ inputs.tenantId }}"}'
      # - name: capture asset registry
      #   uses: benc-uk/workflow-dispatch@v1
      #   with:
      #     workflow: Asset registry
      #     token: ${{ secrets.GHCR_TOKEN }}
      #     ref: main
      - uses: slackapi/slack-github-action@v1.23.0
        # if: failure()
        with:
          channel-id: 'n8n'
          payload: |
            {
              "icon_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
              "username": "${{ inputs.environment }}",
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "‚ùå *Deployment failed* üëÄ<${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}|Workflow logs>üëÄ"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
