on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
env:
  GHCR_USER: ${{ vars.GHCR_USER }}
  GHCR_ORG: ${{ vars.GHCR_ORG }}
  GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECLINT_REPO: editorconfig-checker/editorconfig-checker
  ECLINT_VERSION: 2.7.2
jobs:
  helmfile_job:
    name: deploy to EKS
    runs-on: ubuntu-latest
    if: ${{ !contains(github.repository, 'util-orch-template') }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GHCR_TOKEN }}
      - name: process control dotfiles
        run: |
          if [ -f .skip_e2e ] || [ -f .skip-e2e ] || [ -f .skip.e2e ]; then
            echo "E2E=false" >> $GITHUB_ENV
          else
            echo "E2E=true" >> $GITHUB_ENV
          fi
          if [ -f .helmfile_sync ] || [ -f .helmfile-sync ] || [ -f .helmfile.sync ]; then
            echo "HELMFILE_SYNC=true" >> $GITHUB_ENV
          else
            echo "HELMFILE_SYNC=false" >> $GITHUB_ENV
          fi
      - name: detect environment
        run: |
          echo "ENVIRONMENT=${{ inputs.environment }}" >> $GITHUB_ENV
          echo "AZURE_CREDS_SECRET_NAME=${{ inputs.environment }}_AZURE_CREDS"|sed 's/-/_/g' >> $GITHUB_ENV
          case "${{ inputs.environment }}" in
            'eks-chprod01')
              REGION='eu-central-2'
              ;;
            gke-*)
              REGION='${{ vars.GCP_REGION }}'
              ;;
            *)
              REGION='${{ vars.AWS_REGION }}'
              ;;
          esac
          echo "REGION=${REGION}" >> $GITHUB_ENV
      - name: detect cluster
        if: ${{ startsWith(env.ENVIRONMENT, 'eks-') || startsWith(env.ENVIRONMENT, 'gke-') || startsWith(env.ENVIRONMENT, 'aks-') || startsWith(env.ENVIRONMENT, 'ap') }}
        run: |
          if [ "${{ env.ENVIRONMENT }}" == 'eks-dev' ]; then
            CLUSTER='dev01'
          else
            CLUSTER="$(echo ${{ env.ENVIRONMENT }} | sed 's/^eks-//g;s/^gke-//g;s/^aks-//g')"
          fi
          echo "CLUSTER=${CLUSTER}" >> $GITHUB_ENV
      - name: announce
        run: |
          echo "env=${{ env.ENVIRONMENT }}, cluster=${{ env.CLUSTER }}, region=${{ env.REGION }}, e2e=${{ env.E2E }}"
      - uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}
      - name: setup opa
        uses: open-policy-agent/setup-opa@v2
        with:
          version: 0.53.1
      - uses: jaxxstorm/action-install-gh-release@v1
        with:
          repo: ${{ env.ECLINT_REPO }}
          tag: ${{ env.ECLINT_VERSION }}
          binaries-location: bin
          chmod: 0755
      - name: setup editorconfig-checker
        run: |
          ln -s /opt/hostedtoolcache/${{ env.ECLINT_REPO }}/${{ env.ECLINT_VERSION }}/linux-x64/bin/ec-linux-amd64 \
            /opt/hostedtoolcache/${{ env.ECLINT_REPO }}/${{ env.ECLINT_VERSION }}/linux-x64/bin/editorconfig-checker
      - uses: jaxxstorm/action-install-gh-release@v1
        with:
          repo: shenwei356/rush
          tag: v0.5.0
      - name: helm login
        run: |
          helm registry login ghcr.io -u ${{ env.GHCR_USER }} -p ${{ env.GHCR_TOKEN }}
      # - run: just lint
      #   if: ${{ startsWith(env.ENVIRONMENT, 'eks-') || startsWith(env.ENVIRONMENT, 'gke-') || startsWith(env.ENVIRONMENT, 'aks-') }}
      # - uses: mamezou-tech/setup-helmfile@v1.2.0
      #   with:
      #     helmfile-version: 'v0.153.1'
      #     install-kubectl: no
      #     install-helm: no
      - name: setup aws cli
        if: ${{ startsWith(env.ENVIRONMENT, 'eks-') }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}
      - name: login to eks
        if: ${{ startsWith(env.ENVIRONMENT, 'eks-') || startsWith(env.ENVIRONMENT, 'ap') }}
        run: |
          aws eks update-kubeconfig --name ${{ env.CLUSTER }}
      - name: setup openvpn
        if: ${{ startsWith(env.ENVIRONMENT, 'iv-') }}
        run: |
          sudo apt-get update
          sudo apt-get --assume-yes --no-install-recommends install openvpn
          echo "KUBE_CONFIG_DATA_KEY=${{ env.ENVIRONMENT }}_KUBE_CONFIG_DATA" | sed 's/-/_/g' >> $GITHUB_ENV
      - name: start openvpn
        if: ${{ startsWith(env.ENVIRONMENT, 'iv-') }}
        run: |
          echo "${{ secrets.NDVR_OVPN_USERNAME_PASSWORD }}" > secrets.txt
          echo "${{ secrets.NDVR_OVPN_CONF }}" > config.ovpn
          mkdir $HOME/.kube
          echo "${{ secrets[env.KUBE_CONFIG_DATA_KEY] }}" > $HOME/.kube/config
          sudo chmod 600 $HOME/.kube/config
          sudo echo '10.100.235.50 haproxy' | sudo tee -a /etc/hosts
          sudo openvpn --config config.ovpn --log openvpn.log --daemon
      - name: wait for openvpn
        if: ${{ startsWith(env.ENVIRONMENT, 'iv-') }}
        run: |
          until ping -c1 haproxy; do sleep 2; done
      - name: login to gcp
        if: ${{ startsWith(env.ENVIRONMENT, 'gke-') }}
        uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
      - name: login to gke
        if: ${{ startsWith(env.ENVIRONMENT, 'gke-') }}
        uses: 'google-github-actions/get-gke-credentials@v2'
        with:
          cluster_name: ${{ env.CLUSTER }}
          location: ${{ env.REGION }}
      - name: setup gke context
        if: ${{ startsWith(env.ENVIRONMENT, 'gke-') }}
        run: |
          kubectl config rename-context $(kubectl config current-context) ${{ env.ENVIRONMENT }}
      - name: login to azure
        if: ${{ startsWith(env.ENVIRONMENT, 'aks-') }}
        uses: azure/login@v2
        with:
          creds: ${{ secrets[env.AZURE_CREDS_SECRET_NAME] }}
      - name: login to aks
        uses: azure/aks-set-context@v3
        if: ${{ startsWith(env.ENVIRONMENT, 'aks-') }}
        with:
           resource-group: "${{ env.CLUSTER }}"
           cluster-name: "${{ env.CLUSTER }}"
      - name: disable error notifications
        run: |
          echo "DEPLOYMENT_BEGIN=$(($(date +%s%N)/1000000))" >> $GITHUB_ENV
          kubectl patch daemonset fluent-bit -n telemetry -p '{"spec": {"template": {"spec": {"nodeSelector": {"non-existing": "true"}}}}}' || true
      - name: helmfile apply
        if: ${{ env.HELMFILE_SYNC == 'false' }}
        run: |
          helmfile apply --concurrency 4
      - name: helmfile sync
        if: ${{ env.HELMFILE_SYNC == 'true' }}
        run: |
          helmfile sync --concurrency 4
      - name: health check
        run: |
          just health
      - name: create deployment annotation
        if: always()
        run: |
          kubectl run curl-pod --image=curlimages/curl --attach --restart=Never --rm -- curl --request POST http://kube-prometheus-stack-grafana.prometheus.svc.cluster.local:80/api/annotations \
          --header 'Content-Type: application/json' \
          --data-raw '{
            "time":${{ env.DEPLOYMENT_BEGIN }},
            "timeEnd":'$(($(date +%s%N)/1000000))',
            "tags":["deployment", "${{ job.status }}"],
            "text":"Deployment"
          }'
      - name: enable error notifications
        if: always()
        run: |
          kubectl patch daemonset fluent-bit -n telemetry --type json -p='[{"op": "remove", "path": "/spec/template/spec/nodeSelector/non-existing"}]' || true
      - name: start e2e tests
        uses: benc-uk/workflow-dispatch@v1
        if: ${{ env.E2E == 'true' }}
        with:
          workflow: e2e.yaml
          repo: ${{ vars.GHCR_ORG }}/endeavour-e2e
          token: ${{ secrets.GHCR_TOKEN }}
          ref: main
          inputs: '{"environment": "${{ env.ENVIRONMENT }}"}'
      - name: capture asset registry
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Asset registry
          token: ${{ secrets.GHCR_TOKEN }}
          ref: main
      - uses: slackapi/slack-github-action@v1.23.0
        if: ${{ failure() }}
        with:
          channel-id: 'alert-orch'
          payload: |
            {
              "icon_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
              "username": "${{ env.ENVIRONMENT }}", "unfurl_links": false, "unfurl_media": false,
              "blocks": [{
                "type": "section",
                "fields": [
                  {"type": "mrkdwn", "text": "‚ùå *Deployment failed* ‚ùå"},
                  {"type": "mrkdwn", "text": "üëÄ <${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}|Workflow logs> üëÄ"}
                ]
              }]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      - name: open opsgenie alert
        uses: rockem/create-opsgenie-alert-action@v1
        if: ${{ failure() }}
        with:
          api_key: ${{ secrets.OPSGENIE_API_KEY }}
          alias: orch-${{ env.ENVIRONMENT }}
          message: Deployment failed
          description: |
            <a target="_blank" href="${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}">Workflow logs</a>
          priority: P3
          tags: endeavour,github,orch,${{ env.ENVIRONMENT }}
          using_eu_url: true
      - name: close opsgenie alert
        uses: rockem/close-opsgenie-alert-action@v1
        if: ${{ success() }}
        with:
          api_key: ${{ secrets.OPSGENIE_API_KEY }}
          alias: orch-${{ env.ENVIRONMENT }}
          using_eu_url: true
      - name: stop openvpn
        if: ${{ always() }}
        run: |
          if [ "${{ startsWith(env.ENVIRONMENT, 'iv-') }}" == 'true' ]; then
            sudo chmod 777 openvpn.log
            sudo killall openvpn
          fi
      - name: archive openvpn logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: OpenVPN logs
          path: openvpn.log
          if-no-files-found: ignore
