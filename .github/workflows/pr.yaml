on:
  workflow_call:
    secrets:
      GHCR_TOKEN:
        required: true

env:
  GHCR_USER: innovationlabsmt
  GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
  REPO_DEVOPS_BRANCH: main
  REPO_WORKFLOWS_BRANCH: main

jobs:
  pr:
    name: Build pull request
    runs-on: ubuntu-latest
    if: ${{ !startsWith(github.repository, 'GiGInnovationLabs/util-dotnet-template') }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.GHCR_TOKEN }}
      - uses: wagoid/commitlint-github-action@v4
        with:
          configFile: .commitlintrc.yml
          token: ${{ secrets.GHCR_TOKEN }}
      - uses: extractions/setup-just@v1
      - name: Ensure sync with upstream
        run: |
          just synctpl
          if [ -n "$(git status --porcelain | grep -v 'pr.yaml')" ]; then
            git diff HEAD
            echo "::error title=synctpl::Microservice is not up to date with upstream, run just synctpl to fix."
            exit 1
          fi
      - uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: helm login
        run: |
          helm registry login ghcr.io -u ${{ env.GHCR_USER }} -p ${{ env.GHCR_TOKEN }}
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'
      - uses: mstachniuk/ci-skip@v1
        id: skipTest
        with:
          commit-filter: '[skip test]'
      - name: setup opa
        if: ${{ steps.skipTest.outputs.ci-skip == 'false' }}
        uses: open-policy-agent/setup-opa@v1
        with:
          version: latest
      - name: test
        if: ${{ steps.skipTest.outputs.ci-skip == 'false' }}
        run: just test

      - uses: volesen/setup-skaffold@v1.1
        with:
          version: v1.38.0
      - uses: rinx/setup-k3d@v0.0.4
        with:
          skipClusterCreation: true
      - uses: mamezou-tech/setup-helmfile@v1.0.0
        with:
          helmfile-version: "v0.145.2"
          install-kubectl: no
          install-helm: no
      - uses: actions/checkout@v2
        with:
          path: ./devops
          token: ${{ secrets.GHCR_TOKEN }}
          repository: GiGInnovationLabs/devops
          ref: ${{ env.REPO_DEVOPS_BRANCH }}
      # - name: Deploy external services
      #   working-directory: ./devops/k3d
      #   run: |
      #     docker-compose up -d
      - name: Deploy in-cluster services
        working-directory: ./devops/helmfile
        run: |
          just compose
          just k3d
          just rup default-support
          just rup apcrg
      # TODO only run it conditionally for DWH, related to https://github.com/GiGInnovationLabs/endeavour-dwh/issues/53
      # - name: Deploy KSQLDB / Kafka Connect
      #   working-directory: ./devops/helmfile
      #   run: |
      #     helmfile -f helmfile.yaml -e k3d -l name=strimzi-operator sync --skip-deps
      #     helmfile -f helmfile.yaml -e k3d -l name=strimzi-support -l name=ksqldb sync --skip-deps
      - name: Prepare kafka
        run: |
          for AVRO in `find src/ -name '*.avsc' | grep -v bin`; do
            TOPIC=$(basename $AVRO | sed 's/\.avsc$//g')

            docker run -e BROKERS=host.k3d.internal:9092 --add-host=host.k3d.internal:host-gateway \
              deviceinsight/kafkactl:latest create topic $TOPIC || true

            kubectl exec deploy/apcrg-apicurio-registry -n apicurio -- \
              curl -Ss -XPOST -H "Content-Type:application/json" \
                -d '{"schema":"{\"type\":\"record\",\"name\":\"'${TOPIC}'\",\"fields\":[]}","schemaType":"AVRO"}' \
                localhost:8080/apis/ccompat/v6/subjects/${TOPIC}-value/versions
          done

      - name: Deploy microservice
        run: |
          just pgsql
          just up

      - name: Failure logs
        if: ${{ failure() }}
        run: |
          CHART=$(basename `pwd`)
          for NS in $(kubectl get ns --no-headers -o custom-columns=:metadata.name); do
            echo "Namespace: ${NS}"
            echo "------------------------------------------------------------------------------------------------------------------"
            kubectl logs -l app.kubernetes.io/name=${CHART} -n ${NS} --tail=-1
            echo "------------------------------------------------------------------------------------------------------------------"
            echo ""
          done
