on:
  workflow_call:
    secrets:
      GHCR_TOKEN:
        required: true
      SONAR_TOKEN:
        required: true
env:
  GHCR_USER: ${{ vars.GHCR_USER }}
  GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
  GHCR_ORG: ${{ vars.GHCR_ORG }}
  REPO_DEVOPS_BRANCH: main
  ECLINT_REPO: editorconfig-checker/editorconfig-checker
  ECLINT_VERSION: 2.7.2
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: https://sonarcloud.io
  PROJECT_KEY: GiGInnovationLabs_${{ github.event.repository.name }}
jobs:
  test:
    name: run tests
    runs-on: ubuntu-latest
    if: ${{ !contains(github.repository, 'util-dotnet-template') }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GHCR_TOKEN }}
      - uses: wagoid/commitlint-github-action@v5
        with:
          configFile: .commitlintrc.yml
          token: ${{ secrets.GHCR_TOKEN }}
      - uses: extractions/setup-just@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ vars.GHCR_USER }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: helm login
        run: |
          helm registry login ghcr.io -u ${{ env.GHCR_USER }} -p ${{ env.GHCR_TOKEN }}
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
           6.0.x
           8.0.x
      - name: setup opa
        uses: open-policy-agent/setup-opa@v2
        with:
          version: 0.53
      - uses: StyraInc/setup-regal@main
        if: ${{ contains(github.repository, '-opa-') }}
        with:
          version: 0.23.0
      - uses: jaxxstorm/action-install-gh-release@v1.12.0
        if: ${{ contains(github.repository, '-opa-') || contains(github.repository, '-mock-api') }}
        with:
          repo: ${{ env.ECLINT_REPO }}
          tag: ${{ env.ECLINT_VERSION }}
          binaries-location: bin
          chmod: 0755
      - name: setup editorconfig-checker
        if: ${{ contains(github.repository, '-opa-') || contains(github.repository, '-mock-api') }}
        run: |
          ln -s /opt/hostedtoolcache/${{ env.ECLINT_REPO }}/${{ env.ECLINT_VERSION }}/linux-x64/bin/ec-linux-amd64 \
            /opt/hostedtoolcache/${{ env.ECLINT_REPO }}/${{ env.ECLINT_VERSION }}/linux-x64/bin/editorconfig-checker
      - name: Test
        if: ${{ contains(github.repository, '-opa-') }}
        run: |
          just test
      - name: Lint
        if: ${{ !contains(github.repository, '-opa-') }}
        run: |
          just lint      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        if: ${{ !contains(github.repository, '-opa-') }}
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        if: ${{ !contains(github.repository, '-opa-') }}
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        if: ${{ !contains(github.repository, '-opa-') }}
        with:
          path: ~/.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install Sonar Scanner Tool
        if: ${{ !contains(github.repository, '-opa-') && steps.cache-sonar-scanner.outputs.cache-hit != 'true' }}
        run: |
          mkdir -p ~/.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ~/.sonar/scanner

      - name: Install Report Generator
        if: ${{ !contains(github.repository, '-opa-') }}
        run: |
          mkdir -p ~/.reportgenerator
          dotnet tool update dotnet-reportgenerator-globaltool --tool-path ~/.reportgenerator --version 5.3.11

      - name: Run Tests and Generate Coverage Report
        if: ${{ !contains(github.repository, '-opa-') }}
        run: |
          dotnet tool restore
          dotnet test --logger trx --results-directory /tmp/test-report --filter "Category=Unit|Category=Component|Category=Integration" --collect:"XPlat Code Coverage"
          ~/.reportgenerator/reportgenerator -reports:"/tmp/test-report/**/coverage.cobertura.xml" -targetdir:"coverage-report" -reporttypes:SonarQube

      - name: Build and Analyze
        if: ${{ !contains(github.repository, '-opa-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ~/.sonar/scanner/dotnet-sonarscanner begin /k:"$PROJECT_KEY" /o:"giginnovationlabs" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ env.SONAR_HOST_URL }}" /d:sonar.coverageReportPaths="coverage-report/SonarQube.xml"
          dotnet build
          ~/.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: Install jq (for JSON parsing)
        if: ${{ !contains(github.repository, '-opa-') }}
        run: sudo apt-get install jq -y

      - name: Check Quality Gate Status
        if: ${{ !contains(github.repository, '-opa-') }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          echo "Checking Quality Gate for Pull Request #${PR_NUMBER}"

          API_URL="https://sonarcloud.io/api/qualitygates/project_status?projectKey=${PROJECT_KEY}&pullRequest=${PR_NUMBER}"

          # Fetch Quality Gate Status
          TIMEOUT=$(( ${SECONDS} + 300 )) # We stop checking after 5 minutes
          STATUS=$(curl -s -u "${SONAR_TOKEN}:" "${API_URL}" | jq -r .projectStatus.status)
          until [[ "${STATUS}" != "PENDING" && "${STATUS}" != "IN_PROGRESS" && -n "${STATUS}" || ${SECONDS} -ge ${TIMEOUT} ]]; do
            echo "Current Quality Gate Status: ${STATUS}"
            sleep 5
            STATUS=$(curl -s -u "${SONAR_TOKEN}:" "${API_URL}" | jq -r .projectStatus.status)
          done
          if [[ "${STATUS}" == "PENDING" || "${STATUS}" == "IN_PROGRESS" || -z "${STATUS}" || ${SECONDS} -ge ${TIMEOUT} ]]; then
            echo "Quality Gate Status for Pull Request #${PR_NUMBER}: ${STATUS}"
            echo "Quality Gate check timed out!"
            exit 1
          fi
  
          if [[ "${STATUS}" != "OK" ]]; then
            echo "Quality Gate failed for Pull Request #${PR_NUMBER}!"
            exit 1
          else
            echo "Quality Gate passed for Pull Request #${PR_NUMBER}!"
          fi

      - id: hasTestReport
        if: ${{ always() }}
        run: |
          if [ "$(find /tmp/test-report -name '*.trx' 2>/dev/null | wc -l)" -gt 0 ]; then
            echo "hasTrx=true" >> $GITHUB_OUTPUT
          elif [ "$(find /tmp/test-report -name '*.xml' 2>/dev/null | wc -l)" -gt 0 ]; then
            echo "hasJunit=true" >> $GITHUB_OUTPUT
          fi
      - name: test report trx
        uses: dorny/test-reporter@v1
        if: ${{ (success() || failure()) && steps.hasTestReport.outputs.hasTrx == 'true' }}
        with:
          name: test report
          path: /tmp/test-report/*.trx
          reporter: dotnet-trx
      - name: test report junit
        uses: dorny/test-reporter@v1
        if: ${{ (success() || failure()) && steps.hasTestReport.outputs.hasJunit == 'true' }}
        with:
          name: test report
          path: /tmp/test-report/*.xml
          reporter: java-junit

  k3d:
    name: deploy to k3d
    runs-on: ubuntu-latest
    if: ${{ !contains(github.repository, 'util-dotnet-template') }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GHCR_TOKEN }}
      - uses: extractions/setup-just@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ vars.GHCR_USER }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: helm login
        run: |
          helm registry login ghcr.io -u ${{ env.GHCR_USER }} -p ${{ env.GHCR_TOKEN }}
      - uses: jaxxstorm/action-install-gh-release@v1.12.0
        with:
          repo: GoogleContainerTools/skaffold
          tag: v1.38.0
          cache: enable
          extension-matching: disable
          rename-to: skaffold
          chmod: 0755
      - uses: rinx/setup-k3d@v0.0.4
        with:
          version: v5.5.1
          skipClusterCreation: true
      - uses: mamezou-tech/setup-helmfile@v2.0.0
        with:
          helmfile-version: "v0.153.1"
          install-kubectl: no
          install-helm: no
      - uses: actions/checkout@v4
        with:
          path: ./devops
          token: ${{ secrets.GHCR_TOKEN }}
          repository: ${{ vars.GHCR_ORG }}/devops
          ref: ${{ env.REPO_DEVOPS_BRANCH }}
      - name: deploy infrastructure
        working-directory: ./devops/helmfile
        run: |
          just compose k3d
          just _up-ci
      - name: Deploy KSQLDB
        if: ${{ contains(github.repository, 'dwh') }}
        working-directory: ./devops/helmfile
        run: |
          sudo echo '127.0.0.1 apcrg.localhost' | sudo tee -a /etc/hosts
          helmfile -e k3d -f ./helmfile-minimal.yaml -l name=kubernetes-replicator sync --skip-deps

          helmfile -f helmfile.yaml -e k3d repos
          helmfile -f helmfile.yaml -e k3d -l name=ksqldb sync --skip-deps
      - name: deploy microservice
        run: just up
      - name: failure logs ksqldb
        if: ${{ failure() && contains(github.repository, 'dwh') }}
        run: |
          echo "------------------------------------------------------------------------------------------------------------------"
          kubectl get all -n kafka
          echo "------------------------------------------------------------------------------------------------------------------"
          kubectl logs -l app=cp-ksql-server -n kafka --tail=-1
          echo "------------------------------------------------------------------------------------------------------------------"
      - name: failure logs
        if: ${{ failure() }}
        run: |
          CHART=$(basename `pwd`)
          echo "------------------------------------------------------------------------------------------------------------------"
          kubectl get all -n apicurio
          echo "------------------------------------------------------------------------------------------------------------------"
          kubectl logs -l app.kubernetes.io/name=apicurio-registry -n apicurio --tail=-1
          echo "------------------------------------------------------------------------------------------------------------------"

          echo "------------------------------------------------------------------------------------------------------------------"
          kubectl get all
          echo "------------------------------------------------------------------------------------------------------------------"

          echo "------------------------------------------------------------------------------------------------------------------"
          k3d version
          docker ps
          kubectl describe po $CHART || true
          echo "------------------------------------------------------------------------------------------------------------------"

          for NS in $(kubectl get ns --no-headers -o custom-columns=:metadata.name); do
            echo "Namespace: ${NS}"
            echo "------------------------------------------------------------------------------------------------------------------"
            kubectl logs -l app.kubernetes.io/name=${CHART} -n ${NS} --tail=-1
            echo "------------------------------------------------------------------------------------------------------------------"
            echo ""
          done
