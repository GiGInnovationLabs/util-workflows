on:
  workflow_call:
    secrets:
      GHCR_TOKEN:
        required: true

env:
  GHCR_USER: innovationlabsmt
  GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
  REPO_DEVOPS_BRANCH: main
  REPO_WORKFLOWS_BRANCH: main

jobs:
  test:
    name: run tests
    runs-on: ubuntu-latest
    if: ${{ !startsWith(github.repository, 'GiGInnovationLabs/util-dotnet-template') }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GHCR_TOKEN }}
      - uses: wagoid/commitlint-github-action@v4
        with:
          configFile: .commitlintrc.yml
          token: ${{ secrets.GHCR_TOKEN }}
      - uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}
      - uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: helm login
        run: |
          helm registry login ghcr.io -u ${{ env.GHCR_USER }} -p ${{ env.GHCR_TOKEN }}
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'
      - id: skipTest
        uses: Legorooj/skip-ci@main
        with:
          pattern: '\[skip\stest\]'
          token: ${{ env.GHCR_TOKEN }}
      - name: setup opa
        if: ${{ steps.skipTest.outputs.canSkip != 'true' }}
        uses: open-policy-agent/setup-opa@v1
        with:
          version: latest
      - name: test
        if: ${{ steps.skipTest.outputs.canSkip != 'true' }}
        run: just test
      - id: hasTestReport
        if: ${{ (success() || failure()) && steps.skipTest.outputs.canSkip != 'true' }}
        run: |
          if [ "$(find /tmp/test-report -name '*.trx' 2>/dev/null | wc -l)" -gt 0 ]; then
            echo "hasTrx=true" >> $GITHUB_OUTPUT
          elif [ "$(find /tmp/test-report -name '*.xml' 2>/dev/null | wc -l)" -gt 0 ]; then
            echo "hasJunit=true" >> $GITHUB_OUTPUT
          fi
      - name: test report trx
        uses: dorny/test-reporter@v1
        if: ${{ (success() || failure()) && steps.hasTestReport.outputs.hasTrx == 'true' }}
        with:
          name: test report
          path: /tmp/test-report/*.trx
          reporter: dotnet-trx
      - name: test report junit
        uses: dorny/test-reporter@v1
        if: ${{ (success() || failure()) && steps.hasTestReport.outputs.hasJunit == 'true' }}
        with:
          name: test report
          path: /tmp/test-report/*.xml
          reporter: java-junit

  k3d:
    name: deploy to k3d
    runs-on: ubuntu-latest
    if: ${{ !startsWith(github.repository, 'GiGInnovationLabs/util-dotnet-template') }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GHCR_TOKEN }}
      - uses: extractions/setup-just@v1
      - uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: helm login
        run: |
          helm registry login ghcr.io -u ${{ env.GHCR_USER }} -p ${{ env.GHCR_TOKEN }}
      - uses: volesen/setup-skaffold@v1.1
        with:
          version: v1.38.0
      - uses: rinx/setup-k3d@v0.0.4
        with:
          skipClusterCreation: true
      - uses: mamezou-tech/setup-helmfile@v1.0.0
        with:
          helmfile-version: "v0.146.0"
          install-kubectl: no
          install-helm: no
      - uses: actions/checkout@v3
        with:
          path: ./devops
          token: ${{ secrets.GHCR_TOKEN }}
          repository: GiGInnovationLabs/devops
          ref: ${{ env.REPO_DEVOPS_BRANCH }}
      - name: deploy infrastructure
        working-directory: ./devops/helmfile
        run: |
          just compose k3d
          just _up-ci
      - name: Deploy KSQLDB
        if: ${{ contains(github.repository, 'dwh') }}
        working-directory: ./devops/helmfile
        run: |
          helmfile -e k3d -f ./helmfile-minimal.yaml \
            -l name=kubernetes-replicator sync --skip-deps

          helmfile -f helmfile.yaml -e k3d repos
          helmfile -f helmfile.yaml -e k3d -l name=ksqldb sync --skip-deps
      - name: deploy microservice
        run: just up
      - name: failure logs ksqldb
        if: ${{ failure() && contains(github.repository, 'dwh') }}
        run: |
          echo "------------------------------------------------------------------------------------------------------------------"
          kubectl get all -n kafka
          echo "------------------------------------------------------------------------------------------------------------------"
          kubectl logs -l app=cp-ksql-server -n kafka --tail=-1
          echo "------------------------------------------------------------------------------------------------------------------"
      - name: failure logs
        if: ${{ failure() }}
        run: |
          echo "------------------------------------------------------------------------------------------------------------------"
          kubectl get all -n apicurio
          echo "------------------------------------------------------------------------------------------------------------------"
          kubectl logs -l app.kubernetes.io/name=apicurio-registry -n apicurio --tail=-1
          echo "------------------------------------------------------------------------------------------------------------------"

          CHART=$(basename `pwd`)
          for NS in $(kubectl get ns --no-headers -o custom-columns=:metadata.name); do
            echo "Namespace: ${NS}"
            echo "------------------------------------------------------------------------------------------------------------------"
            kubectl logs -l app.kubernetes.io/name=${CHART} -n ${NS} --tail=-1
            echo "------------------------------------------------------------------------------------------------------------------"
            echo ""
          done
          echo "------------------------------------------------------------------------------------------------------------------"
          kubectl describe po $CHART || true
          echo "------------------------------------------------------------------------------------------------------------------"
